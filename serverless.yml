service: nucleus-app

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-1
  stage: ${opt:stage, 'prod'}
  memorySize: 1024
  timeout: 30
  
  environment:
    NODE_ENV: production
    DATABASE_URL: postgresql://nucleus:NucleusDB2024!@nucleus-db.cnugkau8sbzn.us-west-1.rds.amazonaws.com:5432/nucleus
    AWS_COGNITO_USER_POOL_ID: us-west-1_OFUJ1nGHS
    AWS_COGNITO_CLIENT_ID: 65rt4elpftmbse0nv1bloofp39
    AWS_COGNITO_CLIENT_SECRET: 1u49r28nup8og0jbtm781hqilacqdkho3ns3c6heul3gcs8kdhte
    AWS_COGNITO_DOMAIN: us-west-1ofuj1nghs.auth.us-west-1.amazoncognito.com
    AWS_S3_BUCKET_NAME: nucleus-uploads-1754338091
    AWS_BEDROCK_REGION: us-west-2
    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY, 'your-perplexity-key'}
    STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key_here
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET, 'your-webhook-secret'}
    VITE_AWS_COGNITO_DOMAIN: us-west-1ofuj1nghs.auth.us-west-1.amazoncognito.com
    VITE_AWS_COGNITO_CLIENT_ID: 65rt4elpftmbse0nv1bloofp39
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: 'arn:aws:cognito-idp:us-west-1:415846853155:userpool/us-west-1_OFUJ1nGHS'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: 'arn:aws:s3:::nucleus-uploads-1754338091/*'
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: 
            - 'arn:aws:bedrock:us-west-2::foundation-model/amazon.nova-pro-v1:0'
            - 'arn:aws:bedrock:us-west-2::foundation-model/amazon.nova-lite-v1:0'
        - Effect: Allow
          Action:
            - rds:DescribeDBInstances
            - rds:Connect
          Resource: '*'
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:us-west-1:415846853155:*'

functions:
  app:
    handler: dist/lambda.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

plugins:
  - serverless-offline
  - serverless-domain-manager

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
  
  customDomain:
    domainName: api.foundrcheck.com
    stage: prod
    basePath: ''
    certificateArn: 'arn:aws:acm:us-west-1:415846853155:certificate/cf489104-5d2c-42fe-bd9e-1855a8e16b5e'
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest

package:
  patterns:
    - 'dist/lambda.js'
    - 'dist/public/**'
    - '!node_modules/**'
    - 'node_modules/.prisma/client/libquery_engine-rhel-openssl-1.0.x.so.node'
    - 'node_modules/.prisma/client/schema.prisma'
    - '!client/**'
    - '!.git/**'
    - '!*.md'
    - '!*.log'
    - '!package.json'