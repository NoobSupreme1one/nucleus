import * as cdk from 'aws-cdk-lib';
import * as cognito from 'aws-cdk-lib/aws-cognito';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as apprunner from 'aws-cdk-lib/aws-apprunner';
import * as cloudfront from 'aws-cdk-lib/aws-cloudfront';
import * as origins from 'aws-cdk-lib/aws-cloudfront-origins';
import { Construct } from 'constructs';

export class NucleusInfrastructureStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);\n\n    // VPC for RDS and Lambda (if needed)\n    const vpc = new ec2.Vpc(this, 'NucleusVPC', {\n      maxAzs: 2,\n      natGateways: 1,\n    });\n\n    // Cognito User Pool for Authentication\n    const userPool = new cognito.UserPool(this, 'NucleusUserPool', {\n      userPoolName: 'nucleus-users',\n      selfSignUpEnabled: true,\n      signInAliases: { email: true },\n      autoVerify: { email: true },\n      passwordPolicy: {\n        minLength: 8,\n        requireLowercase: true,\n        requireUppercase: true,\n        requireDigits: true,\n        requireSymbols: false,\n      },\n      accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n\n    const userPoolClient = new cognito.UserPoolClient(this, 'NucleusUserPoolClient', {\n      userPool,\n      authFlows: {\n        userPassword: true,\n        userSrp: true,\n      },\n      generateSecret: false,\n    });\n\n    // S3 Bucket for file uploads\n    const uploadsBucket = new s3.Bucket(this, 'NucleusUploadsBucket', {\n      bucketName: `nucleus-uploads-${this.account}-${this.region}`,\n      cors: [{\n        allowedHeaders: ['*'],\n        allowedMethods: [s3.HttpMethods.GET, s3.HttpMethods.PUT, s3.HttpMethods.POST, s3.HttpMethods.DELETE],\n        allowedOrigins: ['*'],\n        maxAge: 3000,\n      }],\n      publicReadAccess: true,\n      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ACLS,\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n\n    // RDS PostgreSQL Database\n    const database = new rds.DatabaseInstance(this, 'NucleusDatabase', {\n      engine: rds.DatabaseInstanceEngine.postgres({\n        version: rds.PostgresEngineVersion.VER_15,\n      }),\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),\n      credentials: rds.Credentials.fromGeneratedSecret('nucleus', {\n        secretName: 'nucleus-db-credentials',\n      }),\n      vpc,\n      multiAz: false,\n      allocatedStorage: 20,\n      storageEncrypted: true,\n      deletionProtection: false,\n      databaseName: 'nucleus',\n      removalPolicy: cdk.RemovalPolicy.DESTROY,\n    });\n\n    // IAM Role for Lambda/App Runner\n    const executionRole = new iam.Role(this, 'NucleusExecutionRole', {\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n      managedPolicies: [\n        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),\n        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaVPCAccessExecutionRole'),\n      ],\n      inlinePolicies: {\n        NucleusServicePolicy: new iam.PolicyDocument({\n          statements: [\n            new iam.PolicyStatement({\n              effect: iam.Effect.ALLOW,\n              actions: [\n                'cognito-idp:*',\n              ],\n              resources: [userPool.userPoolArn],\n            }),\n            new iam.PolicyStatement({\n              effect: iam.Effect.ALLOW,\n              actions: [\n                's3:GetObject',\n                's3:PutObject',\n                's3:DeleteObject',\n              ],\n              resources: [`${uploadsBucket.bucketArn}/*`],\n            }),\n            new iam.PolicyStatement({\n              effect: iam.Effect.ALLOW,\n              actions: [\n                'bedrock:InvokeModel',\n                'bedrock:InvokeModelWithResponseStream',\n              ],\n              resources: [\n                `arn:aws:bedrock:${this.region}::foundation-model/amazon.nova-pro-v1:0`,\n                `arn:aws:bedrock:${this.region}::foundation-model/amazon.nova-lite-v1:0`,\n              ],\n            }),\n            new iam.PolicyStatement({\n              effect: iam.Effect.ALLOW,\n              actions: [\n                'rds:DescribeDBInstances',\n                'rds:Connect',\n              ],\n              resources: ['*'],\n            }),\n          ],\n        }),\n      },\n    });\n\n    // Option 1: Lambda + API Gateway\n    const lambdaFunction = new lambda.Function(this, 'NucleusLambda', {\n      runtime: lambda.Runtime.NODEJS_18_X,\n      handler: 'lambda.handler',\n      code: lambda.Code.fromAsset('dist'),\n      timeout: cdk.Duration.seconds(30),\n      memorySize: 1024,\n      role: executionRole,\n      vpc,\n      environment: {\n        NODE_ENV: 'production',\n        AWS_COGNITO_USER_POOL_ID: userPool.userPoolId,\n        AWS_COGNITO_CLIENT_ID: userPoolClient.userPoolClientId,\n        AWS_S3_BUCKET_NAME: uploadsBucket.bucketName,\n        AWS_BEDROCK_REGION: this.region,\n        DATABASE_URL: `postgresql://nucleus:${database.secret?.secretValueFromJson('password')}@${database.instanceEndpoint.hostname}:5432/nucleus`,\n      },\n    });\n\n    const api = new apigateway.LambdaRestApi(this, 'NucleusApi', {\n      handler: lambdaFunction,\n      proxy: true,\n      defaultCorsPreflightOptions: {\n        allowOrigins: apigateway.Cors.ALL_ORIGINS,\n        allowMethods: apigateway.Cors.ALL_METHODS,\n        allowHeaders: ['Content-Type', 'Authorization', 'Cookie'],\n      },\n    });\n\n    // CloudFront Distribution\n    const distribution = new cloudfront.Distribution(this, 'NucleusDistribution', {\n      defaultBehavior: {\n        origin: new origins.RestApiOrigin(api),\n        viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n        allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,\n        cachePolicy: cloudfront.CachePolicy.CACHING_DISABLED,\n      },\n      additionalBehaviors: {\n        '/uploads/*': {\n          origin: new origins.S3Origin(uploadsBucket),\n          viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,\n          cachePolicy: cloudfront.CachePolicy.CACHING_OPTIMIZED,\n        },\n      },\n    });\n\n    // Outputs\n    new cdk.CfnOutput(this, 'UserPoolId', {\n      value: userPool.userPoolId,\n      description: 'Cognito User Pool ID',\n    });\n\n    new cdk.CfnOutput(this, 'UserPoolClientId', {\n      value: userPoolClient.userPoolClientId,\n      description: 'Cognito User Pool Client ID',\n    });\n\n    new cdk.CfnOutput(this, 'S3BucketName', {\n      value: uploadsBucket.bucketName,\n      description: 'S3 Bucket for uploads',\n    });\n\n    new cdk.CfnOutput(this, 'DatabaseEndpoint', {\n      value: database.instanceEndpoint.hostname,\n      description: 'RDS Database endpoint',\n    });\n\n    new cdk.CfnOutput(this, 'ApiUrl', {\n      value: api.url,\n      description: 'API Gateway URL',\n    });\n\n    new cdk.CfnOutput(this, 'CloudFrontUrl', {\n      value: `https://${distribution.distributionDomainName}`,\n      description: 'CloudFront Distribution URL',\n    });\n  }\n}"