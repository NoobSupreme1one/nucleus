service: nucleus-app

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 30
  
  environment:
    NODE_ENV: production
    DATABASE_URL: ${env:DATABASE_URL}
    AWS_REGION: ${aws:region}
    AWS_COGNITO_USER_POOL_ID: ${env:AWS_COGNITO_USER_POOL_ID}
    AWS_COGNITO_CLIENT_ID: ${env:AWS_COGNITO_CLIENT_ID}
    AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
    AWS_BEDROCK_REGION: ${env:AWS_BEDROCK_REGION, aws:region}
    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${env:AWS_COGNITO_USER_POOL_ID}'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: !Sub 'arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*'
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: 
            - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-pro-v1:0'
            - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.nova-lite-v1:0'
        - Effect: Allow
          Action:
            - rds:DescribeDBInstances
            - rds:Connect
          Resource: '*'
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

functions:
  app:
    handler: dist/lambda.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    vpc:
      securityGroupIds:
        - ${env:VPC_SECURITY_GROUP_ID}
      subnetIds:
        - ${env:VPC_SUBNET_ID_1}
        - ${env:VPC_SUBNET_ID_2}

resources:
  Resources:
    # S3 Bucket for file uploads
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:AWS_S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['*']
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    # CloudFront Distribution for static assets
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: ApiGateway
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Headers: ['*']
          CacheBehaviors:
            - PathPattern: '/uploads/*'
              TargetOriginId: S3Origin
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD]
              CachedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: false
          Origins:
            - Id: ApiGateway
              DomainName:
                Fn::Join:
                  - ''
                  - - Ref: ApiGatewayRestApi
                    - '.execute-api.'
                    - ${aws:region}
                    - '.amazonaws.com'
              CustomOriginConfig:
                HTTPPort: 443
                OriginProtocolPolicy: https-only
              OriginPath: '/${self:provider.stage}'
            - Id: S3Origin
              DomainName: ${env:AWS_S3_BUCKET_NAME}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity: ''

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

custom:
  webpack:
    webpackConfig: webpack.lambda.js
    includeModules: true
    packager: npm
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
  customDomain:
    domainName: ${env:CUSTOM_DOMAIN, ''}
    stage: ${self:provider.stage}
    createRoute53Record: true